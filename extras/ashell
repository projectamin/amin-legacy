#!/usr/bin/perl

#a shell 
use strict;
use Sys::Hostname;
use Date::Calc qw(Today_and_Now Date_to_Text);
use XML::Generator::PerlData;
use XML::SAX::Writer;
use XML::SAX::PurePerl;
use Cwd;
use Ashell::Config;
use Amin;

#check for $home/.amin and other stuffs...
my $config;
my $command_num = 0;
my $home = $ENV{'HOME'};
my $userdir = "$home/.amin";
my $config_file = "$userdir/ashell.xml";
#this sucks
my $profile;

unless (-d $userdir) {
	#we have no .amin directory make it
	mkdir $userdir, 0700;
}

if (-e $config_file) {
	$config = read_config();
} else {
	#make a new config file
	$config = make_config();
	write_config($config);
}

while (1) {
	my $prompt = get_prompt();
	print $prompt;
	my $command = <STDIN>;
	chomp $command;
	if (($command eq "exit") || ($command eq "quit")) {
		last;
	}
	my $amin_profile;
	#lets see if we can map this $command 
	#instead of white_washing it...
	my $ns;
	my $action;
	my $cn;
	#first check for their namespace
	if ($config->{namespace}) {
		$ns = $config->{namespace};
	} else {
		$ns = "Amin";
	}
	#some sort of "other actions" needed here
	$action = "Command";
	#find the command name
	my @things = split(/([\*\+\.\w=\/-]+|'[^']+')\s*/, $command);
	foreach (@things) {
		if ($_) {
		#check for env
		if (($_ =~ /^-.*$/) || ($_ =~ /^--.*$/)) {
		} elsif ($_ =~ /^.*=.*$/) {
		} else {
			#it is either a param, command name or fscked
			#up flag
			if (!$cn) {
				$cn = $_;
			}
		}
		}
	}
	my $h = "$ns" . "\:\:" . "$action" . "\:\:" . "\u$cn";
	eval "require $h; 1";
	if ($@) {
		#there is no module, so this 
		#needs to become a system_command
		#and white_wash needs to handle it
	}		
	if ( $h->can( "filter_map" ) ) {
		#we can map the command
		my $hash = $h->filter_map($command);
		$amin_profile = generate_profile($hash);
	} else {
		#white_wash the command
		my $hash = white_wash($command);
		$amin_profile = generate_profile($hash); 	
	}
	my $amin = Amin->new();
	
	#needed temp to make work
	$amin->set_machine_spec('file://home/bdumm/Amin/amin/xml_files/machine_spec');
	my $results = $amin->parse_string($amin_profile);
	
	#print $results;
	#print "$amin_profile\n";
}

print "\nHave Fun!\n\n";
exit;




sub generate_profile {
	my $fcommand = shift;
	my $profile;
	#load up the sax process
	my $h = XML::SAX::Writer->new(Output => \$profile);
	my $g = XML::Generator::PerlData->new (
		rootname => 'profile',
		Handler => $h,
		attrmap => {
			'command' => 'name',
			'flag' => 'name',
			'param' => 'name',
			'shell' => 'name',
		},
		charmap => {
			'flag' => 'char',
			'param' => 'char',
			'shell' => 'char',
		},
		namespacemap => {'http://projectamin.org/ns/' => 'profile'},
		namespaces =>  {'http://projectamin.org/ns/' => 'amin' },
	);
	$g->parse($fcommand);
	return $profile;	
}

sub white_wash {
	my $command = shift;
	#pass
	#my $command = "mkdir /tmp/test_dir";
	#my $command = "mkdir -p";
	#my $command = "mkdir -p /tmp/test_dir";
	#my $command = "mkdir -m=0755 /tmp/test_dir";
	#my $command = "ENV=some mkdir -m /tmp/test_dir";
	#my $command = "mkdir /tmp/test_dir /other/dir";
	#my $command = "mkdir -p -m";
	#my $command = "mkdir -p -p";
	#my $command = "ENV=some OTHER=soe mkdir -v -p /tmp/test_dir /other/dir";
	#my $command = "ENV=some OTHER=soe mkdir -i -p /tmp/test_dir /other/param one more \'and another\'";
	
	my $command_name;
	my $flag;
	my $param;
	my %command;
	my @flags;
	my @params;
	my @shells;
	my @things = split(/([\*\+\.\w=\/-]+|'[^']+')\s*/, $command);

	foreach (@things) {
	#check for real stuff
	if ($_) {
		#check for flag
		if (($_ =~ /^-.*$/) || ($_ =~ /^--.*$/)) {
			#it is a flag
			my %flag;
			my $char;
			$_ =~ s/-//;
			$_ =~ s/--//;
			if ($_ =~ /^.*=.*$/) {
				#check for stuff like -m=0755 crap
				($_, $char) = split (/=/, $_);
			} else  {
				#its just a flag
				$char = $_;
				$_ = undef;
			}
			
			if ($_) {
				$flag{"name"} = $_;
			}
			$flag{"char"} = $char;
			push @flags, \%flag;
		} elsif ($_ =~ /^.*=.*$/) {
			my %shell;
			#it is an env variable 
			$shell{"name"} = 'env';
			$shell{"char"} = $_;
			push @shells, \%shell;
		} else {
			#it is either a param, command name
			if (!$command{name}) {
				$command{name} = $_;
			} else {
				my %param;
				$param{"char"} = $_;
				push @params, \%param;
			}
		}
	}
	}
	
	if (@shells) {
		$command{shell} = \@shells;
	}
	if (@flags) {
		$command{flag} = \@flags;
	}
	if (@params) {
		$command{param} = \@params;
	}
	
	my %fcommand;
	$fcommand{command} = \%command;
	return \%fcommand;
}

sub read_config {
	my $home = $ENV{'HOME'};
	my $h = Ashell::Config->new();
	my $p = XML::SAX::PurePerl->new(Handler => $h);
	my $config = $p->parse_uri($config_file);
	return $config;
}

sub write_config {
	my $config = shift;
	my $home = $ENV{'HOME'};
	#my $config_file = "$home/.amin/config.xml";
	
	my $answer;
	if ($config) {	
		my $h = XML::SAX::Writer->new(Output => $config_file);
		my $d  = XML::Generator::PerlData->new(
			rootname => 'config',
			namespacemap => {'http://projectamin.org/ns/' => 'config'},
			namespaces =>  {'http://projectamin.org/ns/' => 'amin' },
			Handler => $h,
		);
		$d->parse($config);
		$answer = "ok";
	}
	return $answer;
}


sub get_prompt {
	$command_num++;
	my $host = hostname();
	my $user = getpwuid($<);
	my ($year,$month,$day, $hour,$min,$sec) = Today_and_Now();
	my $time = "$hour:$min";
	my $date = Date_to_Text($year,$month,$day); 
	my $dir = getcwd(); 
	my $prompt = "\n\n--($user\@$host)-($command_num/$0)-($time/$date)--\n--(\$:$dir)--";
	return $prompt;
}

sub make_config {
	my %config;
	my $p;
	$p = qq {
If you want to log all the ashell responses please
enter the local directory where you want to place
the logs. This must be a uri. (ie file://tmp/logs/)

Otherwise just press enter.
--> };
	print ($p);
	my $log_dir = <STDIN>;
	chomp $log_dir;
	if ($log_dir =~ /:\/\//) {
		$config{'log_dir'} = $log_dir;
	}
	
	$p = qq {
If you want to change the default namespace
please enter it now. Please enter it in the 
following namespace format. ie

xmlns amin http://projectamin.org/ns/

You can use this command to change your namespace
any time you are in ashell.

If this is all gibberish to you, just press enter.

--> };
	print ($p);
	my $ns = <STDIN>;
	chomp $ns;
	if ($ns) {
		my ($command, $namespace, $url) = split(/ /, $ns);
		$config{'namespace'} = $namespace || "amin";
		$config{'namespace_uri'} = $url || "http://projectamin.org/ns/";
	}
	
	print "\n\n\nThanks and welcome to ashell!\n\n\n";
	return \%config;
}

1;

